# -*- coding: utf-8 -*-
"""Major Project DDoS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LCUeLR7wZVaryBNFqtos_367hJzdF0fY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import csv
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_curve, auc
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import label_binarize
from itertools import cycle
import random
from sklearn.tree import export_graphviz
from IPython.display import Image
import graphviz

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/DDos.csv")
df.columns

df.columns = df.columns.str.strip()
overfitting_columns = [
       'Total Fwd Packets', 'Total Backward Packets',
       'Fwd Packet Length Mean',
       'Bwd Packet Length Max', 'Bwd Packet Length Min',
       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',
       'Flow Packets/s', 'Flow IAT Std',
       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Std', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',
       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',
       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags',
       'Bwd Header Length', 'Bwd Packets/s','Packet Length Mean',
       'Packet Length Variance', 'FIN Flag Count',
       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count',
       'URG Flag Count', 'CWE Flag Count', 'ECE Flag Count', 'Down/Up Ratio',
       'Avg Fwd Segment Size', 'Avg Bwd Segment Size',
       'Fwd Avg Bytes/Bulk', 'Fwd Avg Packets/Bulk',
       'Fwd Avg Bulk Rate', 'Bwd Avg Bytes/Bulk', 'Bwd Avg Packets/Bulk',
       'Bwd Avg Bulk Rate', 'Subflow Fwd Packets',
       'Subflow Bwd Packets', 'Subflow Bwd Bytes',
       'Active Mean', 'Active Std', 'Active Max', 'Fwd Header Length.1','act_data_pkt_fwd', 'min_seg_size_forward', 'Active Min', 'Idle Mean',
       'Idle Std', 'Idle Max', 'Idle Min','Destination Port']
df = df.drop(labels=overfitting_columns, axis='columns')

print("columns: ", len(df.columns))
print(df.columns)
df.reset_index(drop=True, inplace=True)
data_f=df.dropna()
data_f.dtypes

plt.figure(1,figsize=( 10,4))
plt.hist( data_f.isna().sum())

plt.xticks([0, 1], labels=['Not Nan=0', 'Nan=1'])
plt.title('Columns with Nan Values')
plt.xlabel('Feature')
plt.ylabel('The number of features')


plt.show()

def plotMissingValues(dataframe):
    missing_values = dataframe.isnull().sum()
    fig = plt.figure(figsize=(13,5))
    missing_values.plot(kind='bar')
    plt.xlabel("Features")
    plt.ylabel("Missing values")
    plt.title("Total NAN values in each feature")
    plt.ylim(0,1)
    plt.show()

plotMissingValues(data_f)

data_f.loc[:,'Label'].unique()

data_f['Label'] = data_f['Label'].map({'BENIGN': 0, 'DDoS': 1})

plt.hist(data_f['Label'], bins=[0, 0.3,0.7,1], edgecolor='black')
plt.xticks([0, 1], labels=['BENIGN=0', 'DDoS=1'])
plt.xlabel("Classes")
plt.ylabel("Count")
plt.show()

xrr=data_f['Label'].value_counts()
print(xrr)

X_train = data_f.drop('Label', axis=1)
y_train= data_f['Label']
#X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=42, test_size=0.2)
print(X_train.shape)
print(y_train.shape)
#print(X_test.shape)
#print(y_test.shape)

daf=pd.read_csv("/content/drive/MyDrive/sample.csv")
daf.columns = daf.columns.str.strip()
overfitting_columns = [
       'Total Fwd Packets', 'Total Backward Packets',
       'Fwd Packet Length Mean',
       'Bwd Packet Length Max', 'Bwd Packet Length Min',
       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',
       'Flow Packets/s', 'Flow IAT Std',
       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Std', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',
       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',
       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags',
       'Bwd Header Length', 'Bwd Packets/s','Packet Length Mean',
       'Packet Length Variance', 'FIN Flag Count',
       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count',
       'URG Flag Count', 'CWE Flag Count', 'ECE Flag Count', 'Down/Up Ratio',
       'Avg Fwd Segment Size', 'Avg Bwd Segment Size',
       'Fwd Avg Bytes/Bulk', 'Fwd Avg Packets/Bulk',
       'Fwd Avg Bulk Rate', 'Bwd Avg Bytes/Bulk', 'Bwd Avg Packets/Bulk',
       'Bwd Avg Bulk Rate', 'Subflow Fwd Packets',
       'Subflow Bwd Packets', 'Subflow Bwd Bytes',
       'Active Mean', 'Active Std', 'Active Max', 'Fwd Header Length.1','act_data_pkt_fwd', 'min_seg_size_forward', 'Active Min', 'Idle Mean',
       'Idle Std', 'Idle Max', 'Idle Min','Destination Port']
daf = daf.drop(labels=overfitting_columns, axis='columns')

print("columns: ", len(daf.columns))
print(daf.columns)
daf.reset_index(drop=True, inplace=True)
datf=daf.dropna()
datf['Label'] = datf['Label'].map({'BENIGN': 0, 'DDoS': 1})
SAMPLEX=datf.drop('Label', axis=1)
SAMPLEY=datf['Label']

import math
math.sqrt(len(data_f['Label']))

rf_model = RandomForestClassifier(n_estimators=10)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(SAMPLEX)
from sklearn import metrics
rf_accuracy = accuracy_score(SAMPLEY, rf_pred)
rf_f1 = f1_score(SAMPLEY, rf_pred)
rf_precision = precision_score(SAMPLEY, rf_pred)
rf_recall = recall_score(SAMPLEY, rf_pred)

print("Confusion Matrix =\n", metrics.confusion_matrix(SAMPLEY, rf_pred, labels=None,
                                              sample_weight=None))
print('\nRandom Forest Metrics:')
print(f'Accuracy: {rf_accuracy:.4f}')
print(f'F1 Score: {rf_f1:.4f}')
print(f'Precision: {rf_precision:.4f}')
print(f'Recall: {rf_recall:.4f}')
num_decision_trees = rf_model.n_estimators
print(f'Number of Decision Trees in Random Forest: {num_decision_trees}')

nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
nb_pred = nb_model.predict(SAMPLEX)
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_curve, auc, confusion_matrix
from sklearn import metrics
rf_accuracy = accuracy_score(SAMPLEY, nb_pred)
rf_f1 = f1_score(SAMPLEY, nb_pred)
rf_precision = precision_score(SAMPLEY, nb_pred)
rf_recall = recall_score(SAMPLEY, nb_pred)
print("Confusion Matrix =\n", metrics.confusion_matrix(SAMPLEY, nb_pred, labels=None,
                                              sample_weight=None))

print('\nNaive bayes:')
print(f'Accuracy: {rf_accuracy:.4f}')
print(f'F1 Score: {rf_f1:.4f}')
print(f'Precision: {rf_precision:.4f}')
print(f'Recall: {rf_recall:.4f}')

knn_model = KNeighborsClassifier(n_neighbors=257, p=2,metric='euclidean')
knn_model.fit(X_train, y_train)
knn_pred = knn_model.predict(SAMPLEX)
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_curve, auc, confusion_matrix
from sklearn import metrics
rf_accuracy = accuracy_score(SAMPLEY, knn_pred)
rf_f1 = f1_score(SAMPLEY, knn_pred)
rf_precision = precision_score(SAMPLEY, knn_pred)
rf_recall = recall_score(SAMPLEY, knn_pred)
print("Confusion Matrix =\n", metrics.confusion_matrix(SAMPLEY, knn_pred, labels=None,
                                              sample_weight=None))

print('\nK Nearest Neighbour:')
print(f'Accuracy: {rf_accuracy:.4f}')
print(f'F1 Score: {rf_f1:.4f}')
print(f'Precision: {rf_precision:.4f}')
print(f'Recall: {rf_recall:.4f}')

data_f = pd.read_csv('/content/drive/MyDrive/2024-03-25_Flow.csv')

data_f.columns = data_f.columns.str.strip()

overfitting_columns = ['Flow ID', 'Src IP', 'Src Port', 'Dst IP', 'Dst Port', 'Protocol',
       'Timestamp','Tot Bwd Pkts','Tot Fwd Pkts',
       'Fwd Pkt Len Mean',
       'Bwd Pkt Len Max', 'Bwd Pkt Len Min', 'Bwd Pkt Len Mean',
       'Bwd Pkt Len Std', 'Flow Byts/s', 'Flow Pkts/s',
       'Flow IAT Std', 'Flow IAT Min', 'Fwd IAT Tot',
       'Fwd IAT Std', 'Fwd IAT Min',
       'Bwd IAT Tot', 'Bwd IAT Mean', 'Bwd IAT Std', 'Bwd IAT Max',
       'Bwd IAT Min', 'Fwd PSH Flags', 'Bwd PSH Flags', 'Fwd URG Flags',
       'Bwd URG Flags', 'Bwd Header Len',
       'Bwd Pkts/s',  'Pkt Len Mean',
       'Pkt Len Var', 'FIN Flag Cnt', 'SYN Flag Cnt',
       'RST Flag Cnt', 'PSH Flag Cnt', 'URG Flag Cnt',
       'CWE Flag Count', 'ECE Flag Cnt', 'Down/Up Ratio',
       'Fwd Seg Size Avg', 'Bwd Seg Size Avg', 'Fwd Byts/b Avg',
       'Fwd Pkts/b Avg', 'Fwd Blk Rate Avg', 'Bwd Byts/b Avg',
       'Bwd Pkts/b Avg', 'Bwd Blk Rate Avg', 'Subflow Fwd Pkts',
       'Subflow Bwd Pkts', 'Subflow Bwd Byts',
       'Fwd Act Data Pkts',
       'Fwd Seg Size Min', 'Active Mean', 'Active Std', 'Active Max',
       'Active Min', 'Idle Mean', 'Idle Std', 'Idle Max', 'Idle Min']

data_f = data_f.drop(labels=overfitting_columns, axis='columns')

print("columns: ", len(data_f.columns))
print(data_f.columns)

plt.figure(1,figsize=( 10,4))
plt.hist(data_f.isna().sum())
plt.xticks([0, 1], labels=['Not Nan=0', 'Nan=1'])
plt.title('Columns with Nan Values')
plt.xlabel('Feature')
plt.ylabel('The number of features')
plt.show()

def plotMissingValues(dataframe):
    missing_values = dataframe.isnull().sum()
    fig = plt.figure(figsize=(13, 5))
    missing_values.plot(kind='bar')
    plt.xlabel("Features")
    plt.ylabel("Missing values")
    plt.title("Total NAN values in each feature")
    plt.show()

plotMissingValues(data_f)

data_f.loc[:,'Label'].unique()

data_f['Label'] = data_f['Label'].map({'BENIGN': 0, 'DDoS': 1})

xrr=data_f['Label'].value_counts()
print(xrr)

XT = data_f.drop('Label', axis=1)
print(len(XT.columns))
XT.columns

rf_pre = rf_model.predict(XT)
if(rf_pre[10]==1):
   print("Attack Packet Detected")
else:
   print("Normal Packet")